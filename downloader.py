from fpdf import FPDF
from docx import Document
import markdown
from flask import render_template


def generate_report(cve_id, cve_data, file_type='pdf'):
    # Extract necessary information from the cve_data dictionary
    description = cve_data.get('description', 'No description available')
    score = cve_data.get('score', 'No score available')
    severity = cve_data.get('severity', 'No severity available')
    exploit_links = cve_data.get('exploit_links', [])
    references = cve_data.get('references', [])
    vector = cve_data.get('vector', 'N/A')
    vendors = cve_data.get('vendors', [])

    # Based on the file type, call the respective function
    if file_type == 'pdf':
        return generate_pdf_report(cve_id, description, score, severity, exploit_links, references, vector, vendors)
    elif file_type == 'docx':
        return generate_docx_report(cve_id, description, score, severity, exploit_links, references, vector, vendors)
    elif file_type == 'html':
        return generate_html_report(cve_id, description, score, severity, exploit_links, references, vector, vendors)
    elif file_type == 'md':
        return generate_md_report(cve_id, description, score, severity, exploit_links, references, vector, vendors)



# PDF Report Generation
from fpdf import FPDF
from docx import Document
import markdown
from flask import render_template

# PDF Report Generation
def generate_pdf_report(cve_id, description, score, severity, exploit_links, references, vector, vendors):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    # Title
    pdf.set_font("Arial", 'B', 16)
    pdf.cell(0, 10, f"CVE Report: {cve_id}", ln=True, align='C')
    pdf.ln(10)

    # Description
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(0, 10, "Description:", ln=True, align='L')
    pdf.set_font("Arial", size=12)
    pdf.multi_cell(0, 10, description)
    pdf.ln(10)

    # Severity, Score, and CVSS Vector
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(0, 10, f"Severity: {severity}  |  Score: {score}", ln=True, align='L')
    pdf.cell(0, 10, f"CVSS Vector: {vector}", ln=True, align='L')
    pdf.ln(10)

    # Affected Vendors
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(0, 10, "Affected Vendors:", ln=True, align='L')
    pdf.set_font("Arial", size=12)
    if vendors:
        for vendor in vendors:
            pdf.cell(0, 10, f"Vendor: {vendor['vendor']} | Product: {vendor['product']}", ln=True)
            for version in vendor['versions']:
                pdf.cell(0, 10, f"    Version: {version['version']} | Status: {version['status']}", ln=True)
    else:
        pdf.cell(0, 10, "No affected vendors found.", ln=True)
    pdf.ln(10)

    # Exploit Links
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(0, 10, "Exploit Links:", ln=True, align='L')
    pdf.set_font("Arial", size=12)
    for exploit in exploit_links:
        if isinstance(exploit, dict):
            date = exploit.get('date', 'Unknown Date')
            platform = exploit.get('platform', 'Unknown Platform')
            author = exploit.get('author', 'Unknown Author')
            download_link = exploit.get('download_link', 'No link available')
            pdf.cell(0, 10, f"Date: {date} | Platform: {platform} | Author: {author}", ln=True)
            pdf.cell(0, 10, download_link, ln=True)
        else:
            pdf.cell(0, 10, exploit, ln=True)
    pdf.ln(10)

    # References
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(0, 10, "References:", ln=True, align='L')
    pdf.set_font("Arial", size=12)
    for ref in references:
        pdf.cell(0, 10, ref, ln=True)

    file_path = f"{cve_id}.pdf"
    pdf.output(file_path)
    return file_path

# DOCX Report Generation
def generate_docx_report(cve_id, description, score, severity, exploit_links, references, vector, vendors):
    doc = Document()
    doc.add_heading(f"CVE Report: {cve_id}", level=1)

    doc.add_heading("Description:", level=2)
    doc.add_paragraph(description)

    doc.add_heading("Severity, Score, and CVSS Vector:", level=2)
    doc.add_paragraph(f"Severity: {severity}  |  Score: {score}")
    doc.add_paragraph(f"CVSS Vector: {vector}")

    doc.add_heading("Affected Vendors:", level=2)
    if vendors:
        for vendor in vendors:
            doc.add_paragraph(f"Vendor: {vendor['vendor']} | Product: {vendor['product']}")
            for version in vendor['versions']:
                doc.add_paragraph(f"    Version: {version['version']} | Status: {version['status']}")
    else:
        doc.add_paragraph("No affected vendors found.")

    doc.add_heading("Exploit Links:", level=2)
    for exploit in exploit_links:
        if isinstance(exploit, dict):
            date = exploit.get('date', 'Unknown Date')
            platform = exploit.get('platform', 'Unknown Platform')
            author = exploit.get('author', 'Unknown Author')
            download_link = exploit.get('download_link', 'No link available')

            doc.add_paragraph(f"Date: {date} | Platform: {platform} | Author: {author}")
            doc.add_paragraph(download_link)
        else:
            doc.add_paragraph(exploit)

    doc.add_heading("References:", level=2)
    for ref in references:
        doc.add_paragraph(ref)

    file_path = f"{cve_id}.docx"
    doc.save(file_path)
    return file_path

# HTML Report Generation
def generate_html_report(cve_id, description, score, severity, exploit_links, references, vector, vendors):
    html_content = f"""
    <html>
    <head>
        <title>CVE Report: {cve_id}</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; }}
            h1 {{ text-align: center; }}
            h2 {{ color: #333366; }}
            p {{ margin: 0 0 10px; }}
            .section {{ margin-bottom: 20px; }}
        </style>
    </head>
    <body>
        <h1>CVE Report: {cve_id}</h1>
        <div class="section">
            <h2>Description:</h2>
            <p>{description}</p>
        </div>
        <div class="section">
            <h2>Severity, Score, and CVSS Vector:</h2>
            <p>Severity: {severity} | Score: {score}</p>
            <p>CVSS Vector: {vector}</p>
        </div>
        <div class="section">
            <h2>Affected Vendors:</h2>
            <ul>
                {"".join(f"<li>Vendor: {vendor['vendor']} | Product: {vendor['product']} | Versions: " + 
                        "".join(f"<ul><li>Version: {version['version']} | Status: {version['status']}</li></ul>" for version in vendor['versions']) 
                        + "</li>" for vendor in vendors) or "<li>No affected vendors found.</li>"}
            </ul>
        </div>
        <div class="section">
            <h2>Exploit Links:</h2>
            <ul>
                {''.join(f'<li>Date: {exploit.get("date", "Unknown Date")} | Platform: {exploit.get("platform", "Unknown Platform")} | Author: {exploit.get("author", "Unknown Author")} | <a href="{exploit.get("download_link", "#")}">Download</a></li>' for exploit in exploit_links)}
            </ul>
        </div>
        <div class="section">
            <h2>References:</h2>
            <ul>
                {''.join(f'<li><a href="{ref}">{ref}</a></li>' for ref in references)}
            </ul>
        </div>
    </body>
    </html>
    """
    
    file_path = f"{cve_id}.html"
    with open(file_path, 'w') as f:
        f.write(html_content)
    
    return file_path

# Markdown Report Generation
def generate_md_report(cve_id, description, score, severity, exploit_links, references, vector, vendors):
    md_content = (
        f"# CVE Report: {cve_id}\n\n"
        f"## Description\n{description}\n\n"
        f"## Severity and Score\nSeverity: {severity} | Score: {score}\n\n"
        f"## CVSS Vector\nCVSS Vector: {vector}\n\n"
        f"## Affected Vendors\n"
        + '\n'.join(
            f"- Vendor: {vendor['vendor']} | Product: {vendor['product']} | Versions: " +
            '\n'.join(f"  - Version: {version['version']} | Status: {version['status']}" for version in vendor['versions'])
            for vendor in vendors) or "No affected vendors found." + "\n\n"
        f"## Exploit Links\n"
        + '\n'.join(
            f"- Date: {exploit.get('date', 'Unknown Date')} | Platform: {exploit.get('platform', 'Unknown Platform')} | Author: {exploit.get('author', 'Unknown Author')} | [Download Link]({exploit.get('download_link', '#')})"
            for exploit in exploit_links) + "\n\n"
        f"## References\n" + '\n'.join(f"- [{ref}]({ref})" for ref in references)
    )
    
    file_path = f"{cve_id}.md"
    with open(file_path, 'w') as f:
        f.write(md_content)
    
    return file_path


